/*
 * This file has been auto-generated by CppUTestMock v0.1.0.
 *
 * Contents will NOT be preserved if it is regenerated!!!
 *
 * Generation options: -p Parser::Parse#error=Pointer/&$ -t "#const std::string &=String/$.c_str()" -t "#const Config &=ConstPointer/&$" 
 */

#include "Parser.hpp"

#include <CppUTestExt/MockSupport.h>

bool Parser::Parse(const std::string & inputFilepath, const Config & config, bool interpretAsCpp, const std::vector<std::string> & includePaths, std::ostream & error)
{
    return mock().actualCall("Parser::Parse").withStringParameter("inputFilepath", inputFilepath.c_str()).withConstPointerParameter("config", &config).withBoolParameter("interpretAsCpp", interpretAsCpp).withParameterOfType("std::vector<std::string>", "includePaths", &includePaths).withPointerParameter("error", &error).returnBoolValue();
}

void Parser::GenerateMock(const std::string & genOpts, std::ostream & output) const
{
    mock().actualCall("Parser::GenerateMock").withStringParameter("genOpts", genOpts.c_str()).withOutputParameterOfType("std::ostream", "output", &output);
}

void Parser::GenerateExpectationHeader(const std::string & genOpts, std::ostream & output) const
{
    mock().actualCall("Parser::GenerateExpectationHeader").withStringParameter("genOpts", genOpts.c_str()).withOutputParameterOfType("std::ostream", "output", &output);
}

void Parser::GenerateExpectationImpl(const std::string & genOpts, const std::string & headerFilepath, std::ostream & output) const
{
    mock().actualCall("Parser::GenerateExpectationImpl").withStringParameter("genOpts", genOpts.c_str()).withStringParameter("headerFilepath", headerFilepath.c_str()).withOutputParameterOfType("std::ostream", "output", &output);
}
