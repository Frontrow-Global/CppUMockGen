/*
 * This file has been auto-generated by CppUMockGen v0.5.
 *
 * Contents will NOT be preserved if it is regenerated!!!
 *
 * Generation options: -t "#const CXCursor &=ConstPointer~&$" -t "#const Config &=ConstPointer~&$" -t "@std::string=String" -t "#const std::string &=String~$.c_str()"
 */

#include "Function_expect.hpp"

namespace expect { namespace Function$ {
MockExpectedCall& Function$ctor()
{
    return Function$ctor(1);
}
MockExpectedCall& Function$ctor(unsigned int __numCalls__)
{
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "Function::Function");
    return __expectedCall__;
}
} }

namespace expect { namespace Function$ {
MockExpectedCall& Function$dtor(CppUMockGen::Parameter<const Function*> __object__)
{
    return Function$dtor(1, __object__);
}
MockExpectedCall& Function$dtor(unsigned int __numCalls__, CppUMockGen::Parameter<const Function*> __object__)
{
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "Function::~Function");
    if(!__object__.isIgnored()) { __expectedCall__.onObject(const_cast<Function*>(__object__.getValue())); }
    return __expectedCall__;
}
} }

namespace expect { namespace Function$ {
MockExpectedCall& Parse(CppUMockGen::Parameter<const Function*> __object__, CppUMockGen::Parameter<const void*> cursor, CppUMockGen::Parameter<const void*> config, bool __return__)
{
    return Parse(1, __object__, cursor, config, __return__);
}
MockExpectedCall& Parse(unsigned int __numCalls__, CppUMockGen::Parameter<const Function*> __object__, CppUMockGen::Parameter<const void*> cursor, CppUMockGen::Parameter<const void*> config, bool __return__)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "Function::Parse");
    if(!__object__.isIgnored()) { __expectedCall__.onObject(const_cast<Function*>(__object__.getValue())); }
    if(cursor.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withConstPointerParameter("cursor", cursor.getValue()); }
    if(config.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withConstPointerParameter("config", config.getValue()); }
    __expectedCall__.andReturnValue(__return__);
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
} }

namespace expect { namespace Function$ {
MockExpectedCall& GenerateMock(CppUMockGen::Parameter<const Function*> __object__, const char* __return__)
{
    return GenerateMock(1, __object__, __return__);
}
MockExpectedCall& GenerateMock(unsigned int __numCalls__, CppUMockGen::Parameter<const Function*> __object__, const char* __return__)
{
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "Function::GenerateMock");
    if(!__object__.isIgnored()) { __expectedCall__.onObject(const_cast<Function*>(__object__.getValue())); }
    __expectedCall__.andReturnValue(__return__);
    return __expectedCall__;
}
} }

namespace expect { namespace Function$ {
MockExpectedCall& GenerateExpectation(CppUMockGen::Parameter<const Function*> __object__, CppUMockGen::Parameter<bool> proto, const char* __return__)
{
    return GenerateExpectation(1, __object__, proto, __return__);
}
MockExpectedCall& GenerateExpectation(unsigned int __numCalls__, CppUMockGen::Parameter<const Function*> __object__, CppUMockGen::Parameter<bool> proto, const char* __return__)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "Function::GenerateExpectation");
    if(!__object__.isIgnored()) { __expectedCall__.onObject(const_cast<Function*>(__object__.getValue())); }
    if(proto.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withBoolParameter("proto", proto.getValue()); }
    __expectedCall__.andReturnValue(__return__);
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
} }

namespace expect { namespace Function$ {
MockExpectedCall& IsMockable(CppUMockGen::Parameter<const Function*> __object__, CppUMockGen::Parameter<const void*> cursor, bool __return__)
{
    return IsMockable(1, __object__, cursor, __return__);
}
MockExpectedCall& IsMockable(unsigned int __numCalls__, CppUMockGen::Parameter<const Function*> __object__, CppUMockGen::Parameter<const void*> cursor, bool __return__)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "Function::IsMockable");
    if(!__object__.isIgnored()) { __expectedCall__.onObject(const_cast<Function*>(__object__.getValue())); }
    if(cursor.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withConstPointerParameter("cursor", cursor.getValue()); }
    __expectedCall__.andReturnValue(__return__);
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
} }

namespace expect { namespace Function$ {
MockExpectedCall& GetExpectationFunctionName(CppUMockGen::Parameter<const Function*> __object__, CppUMockGen::Parameter<const char*> functionName, const char* __return__)
{
    return GetExpectationFunctionName(1, __object__, functionName, __return__);
}
MockExpectedCall& GetExpectationFunctionName(unsigned int __numCalls__, CppUMockGen::Parameter<const Function*> __object__, CppUMockGen::Parameter<const char*> functionName, const char* __return__)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "Function::GetExpectationFunctionName");
    if(!__object__.isIgnored()) { __expectedCall__.onObject(const_cast<Function*>(__object__.getValue())); }
    if(functionName.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withStringParameter("functionName", functionName.getValue()); }
    __expectedCall__.andReturnValue(__return__);
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
} }

