/*
 * This file has been auto-generated by CppUMockGen v0.5.
 *
 * Contents will NOT be preserved if it is regenerated!!!
 *
 * Generation options: -s c++17 -t "#const std::string &=String~$.c_str()"
 */

#include <CppUMockGen.hpp>

#include "Config.hpp"

#include <CppUTestExt/MockSupport.h>

namespace expect { namespace Config$ { namespace OverrideSpec$ {
MockExpectedCall& OverrideSpec$ctor(CppUMockGen::Parameter<const char*> value, CppUMockGen::Parameter<bool> isReturn);
MockExpectedCall& OverrideSpec$ctor(unsigned int __numCalls__, CppUMockGen::Parameter<const char*> value, CppUMockGen::Parameter<bool> isReturn);
} } }

namespace expect { namespace Config$ { namespace OverrideSpec$ {
MockExpectedCall& GetType(CppUMockGen::Parameter<const Config::OverrideSpec*> __object__, MockedType __return__);
MockExpectedCall& GetType(unsigned int __numCalls__, CppUMockGen::Parameter<const Config::OverrideSpec*> __object__, MockedType __return__);
} } }

namespace expect { namespace Config$ { namespace OverrideSpec$ {
MockExpectedCall& GetExposedTypeName(CppUMockGen::Parameter<const Config::OverrideSpec*> __object__, const std::string & __return__);
MockExpectedCall& GetExposedTypeName(unsigned int __numCalls__, CppUMockGen::Parameter<const Config::OverrideSpec*> __object__, const std::string & __return__);
} } }

namespace expect { namespace Config$ { namespace OverrideSpec$ {
MockExpectedCall& GetExprModFront(CppUMockGen::Parameter<const Config::OverrideSpec*> __object__, const std::string & __return__);
MockExpectedCall& GetExprModFront(unsigned int __numCalls__, CppUMockGen::Parameter<const Config::OverrideSpec*> __object__, const std::string & __return__);
} } }

namespace expect { namespace Config$ { namespace OverrideSpec$ {
MockExpectedCall& GetExprModBack(CppUMockGen::Parameter<const Config::OverrideSpec*> __object__, const std::string & __return__);
MockExpectedCall& GetExprModBack(unsigned int __numCalls__, CppUMockGen::Parameter<const Config::OverrideSpec*> __object__, const std::string & __return__);
} } }

namespace expect { namespace Config$ { namespace OverrideSpec$ {
MockExpectedCall& HasSizeExprPlaceholder(CppUMockGen::Parameter<const Config::OverrideSpec*> __object__, const bool __return__);
MockExpectedCall& HasSizeExprPlaceholder(unsigned int __numCalls__, CppUMockGen::Parameter<const Config::OverrideSpec*> __object__, const bool __return__);
} } }

namespace expect { namespace Config$ { namespace OverrideSpec$ {
MockExpectedCall& GetSizeExprFront(CppUMockGen::Parameter<const Config::OverrideSpec*> __object__, const std::string & __return__);
MockExpectedCall& GetSizeExprFront(unsigned int __numCalls__, CppUMockGen::Parameter<const Config::OverrideSpec*> __object__, const std::string & __return__);
} } }

namespace expect { namespace Config$ { namespace OverrideSpec$ {
MockExpectedCall& GetSizeExprBack(CppUMockGen::Parameter<const Config::OverrideSpec*> __object__, const std::string & __return__);
MockExpectedCall& GetSizeExprBack(unsigned int __numCalls__, CppUMockGen::Parameter<const Config::OverrideSpec*> __object__, const std::string & __return__);
} } }

namespace expect { namespace Config$ { namespace OverrideSpec$ {
MockExpectedCall& GetExpectationArgTypeName(CppUMockGen::Parameter<const Config::OverrideSpec*> __object__, const std::string & __return__);
MockExpectedCall& GetExpectationArgTypeName(unsigned int __numCalls__, CppUMockGen::Parameter<const Config::OverrideSpec*> __object__, const std::string & __return__);
} } }

namespace expect { namespace Config$ {
MockExpectedCall& Config$ctor(CppUMockGen::Parameter<bool> interpretAsCpp, CppUMockGen::Parameter<const char*> languageStandard, CppUMockGen::Parameter<bool> useUnderlyingTypedefType, CppUMockGen::Parameter<const std::vector<std::string> &> typeOverrideOptions);
MockExpectedCall& Config$ctor(unsigned int __numCalls__, CppUMockGen::Parameter<bool> interpretAsCpp, CppUMockGen::Parameter<const char*> languageStandard, CppUMockGen::Parameter<bool> useUnderlyingTypedefType, CppUMockGen::Parameter<const std::vector<std::string> &> typeOverrideOptions);
} }

namespace expect { namespace Config$ {
MockExpectedCall& InterpretAsCpp(CppUMockGen::Parameter<const Config*> __object__, bool __return__);
MockExpectedCall& InterpretAsCpp(unsigned int __numCalls__, CppUMockGen::Parameter<const Config*> __object__, bool __return__);
} }

namespace expect { namespace Config$ {
MockExpectedCall& GetLanguageStandard(CppUMockGen::Parameter<const Config*> __object__, const std::string & __return__);
MockExpectedCall& GetLanguageStandard(unsigned int __numCalls__, CppUMockGen::Parameter<const Config*> __object__, const std::string & __return__);
} }

namespace expect { namespace Config$ {
MockExpectedCall& UseUnderlyingTypedefType(CppUMockGen::Parameter<const Config*> __object__, bool __return__);
MockExpectedCall& UseUnderlyingTypedefType(unsigned int __numCalls__, CppUMockGen::Parameter<const Config*> __object__, bool __return__);
} }

namespace expect { namespace Config$ {
MockExpectedCall& GetTypeOverride(CppUMockGen::Parameter<const Config*> __object__, CppUMockGen::Parameter<const char*> key, const Config::OverrideSpec * __return__);
MockExpectedCall& GetTypeOverride(unsigned int __numCalls__, CppUMockGen::Parameter<const Config*> __object__, CppUMockGen::Parameter<const char*> key, const Config::OverrideSpec * __return__);
} }

