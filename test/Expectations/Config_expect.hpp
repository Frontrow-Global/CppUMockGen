/*
 * This file has been auto-generated by CppUTestMock v0.3.0.
 *
 * Contents will NOT be preserved if it is regenerated!!!
 *
 * Generation options: -t "#const std::string &=String/$.c_str()" 
 */

#include <CppUMockGen.h>

#include "Config.hpp"

#include <CppUTestExt/MockSupport.h>

namespace expect { namespace Config$ {
MockExpectedCall& Config$(bool useUnderlyingTypedefType, const std::vector<std::string> &paramOverrideOptions, const std::vector<std::string> &typeOverrideOptions);
} }

namespace expect { namespace Config$ { namespace OverrideSpec$ {
MockExpectedCall& GetType(CppUMockGen::Parameter<const Config::OverrideSpec*> __object__, MockedType __return__);
MockExpectedCall& GetType(unsigned int __numCalls__, CppUMockGen::Parameter<const Config::OverrideSpec*> __object__, MockedType __return__);
} } }

namespace expect { namespace Config$ { namespace OverrideSpec$ {
MockExpectedCall& GetTypeName(CppUMockGen::Parameter<const Config::OverrideSpec*> __object__, const std::string & __return__);
MockExpectedCall& GetTypeName(unsigned int __numCalls__, CppUMockGen::Parameter<const Config::OverrideSpec*> __object__, const std::string & __return__);
} } }

namespace expect { namespace Config$ { namespace OverrideSpec$ {
MockExpectedCall& GetExprModFront(CppUMockGen::Parameter<const Config::OverrideSpec*> __object__, const std::string & __return__);
MockExpectedCall& GetExprModFront(unsigned int __numCalls__, CppUMockGen::Parameter<const Config::OverrideSpec*> __object__, const std::string & __return__);
} } }

namespace expect { namespace Config$ { namespace OverrideSpec$ {
MockExpectedCall& GetExprModBack(CppUMockGen::Parameter<const Config::OverrideSpec*> __object__, const std::string & __return__);
MockExpectedCall& GetExprModBack(unsigned int __numCalls__, CppUMockGen::Parameter<const Config::OverrideSpec*> __object__, const std::string & __return__);
} } }

namespace expect { namespace Config$ {
MockExpectedCall& UseUnderlyingTypedefType(CppUMockGen::Parameter<const Config*> __object__, bool __return__);
MockExpectedCall& UseUnderlyingTypedefType(unsigned int __numCalls__, CppUMockGen::Parameter<const Config*> __object__, bool __return__);
} }

namespace expect { namespace Config$ {
MockExpectedCall& GetParameterOverride(CppUMockGen::Parameter<const Config*> __object__, CppUMockGen::Parameter<const char*> key, const Config::OverrideSpec * __return__);
MockExpectedCall& GetParameterOverride(unsigned int __numCalls__, CppUMockGen::Parameter<const Config*> __object__, CppUMockGen::Parameter<const char*> key, const Config::OverrideSpec * __return__);
} }

namespace expect { namespace Config$ {
MockExpectedCall& GetTypeOverride(CppUMockGen::Parameter<const Config*> __object__, CppUMockGen::Parameter<const char*> key, const Config::OverrideSpec * __return__);
MockExpectedCall& GetTypeOverride(unsigned int __numCalls__, CppUMockGen::Parameter<const Config*> __object__, CppUMockGen::Parameter<const char*> key, const Config::OverrideSpec * __return__);
} }

