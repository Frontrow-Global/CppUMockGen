/*
 * This file has been auto-generated by CppUMockGen v0.5.
 *
 * Contents will NOT be preserved if it is regenerated!!!
 *
 * Generation options: -t "#const CXCursor &=ConstPointer~&$" -t "@std::string=String" -t "#const std::string &=String~$.c_str()"
 */

#include <CppUMockGen.hpp>

#include "Destructor.hpp"

#include <CppUTestExt/MockSupport.h>

namespace expect { namespace Destructor$ {
MockExpectedCall& Destructor$ctor();
MockExpectedCall& Destructor$ctor(unsigned int __numCalls__);
} }

namespace expect { namespace Destructor$ {
MockExpectedCall& IsMockable(CppUMockGen::Parameter<const Destructor*> __object__, CppUMockGen::Parameter<const void*> cursor, bool __return__);
MockExpectedCall& IsMockable(unsigned int __numCalls__, CppUMockGen::Parameter<const Destructor*> __object__, CppUMockGen::Parameter<const void*> cursor, bool __return__);
} }

namespace expect { namespace Destructor$ {
MockExpectedCall& GetExpectationFunctionName(CppUMockGen::Parameter<const Destructor*> __object__, CppUMockGen::Parameter<const char*> functionName, const char* __return__);
MockExpectedCall& GetExpectationFunctionName(unsigned int __numCalls__, CppUMockGen::Parameter<const Destructor*> __object__, CppUMockGen::Parameter<const char*> functionName, const char* __return__);
} }

