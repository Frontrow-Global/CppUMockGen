/*
 * This file has been auto-generated by CppUMockGen v0.6.
 *
 * Contents will NOT be preserved if it is regenerated!!!
 *
 * Generation options: -t "#const std::string &=String~$.c_str()" -t "@std::string=String"
 */

#include <CppUMockGen.hpp>

#include "Options.hpp"

#include <CppUTestExt/MockSupport.h>

namespace expect { namespace Options$ {
MockExpectedCall& Options$ctor();
MockExpectedCall& Options$ctor(unsigned int __numCalls__);
} }

namespace expect { namespace Options$ {
MockExpectedCall& Parse(CppUMockGen::Parameter<const Options*> __object__, CppUMockGen::Parameter<int> argc, CppUMockGen::Parameter<const char **> argv);
MockExpectedCall& Parse(unsigned int __numCalls__, CppUMockGen::Parameter<const Options*> __object__, CppUMockGen::Parameter<int> argc, CppUMockGen::Parameter<const char **> argv);
} }

namespace expect { namespace Options$ {
MockExpectedCall& Parse(CppUMockGen::Parameter<const Options*> __object__, CppUMockGen::Parameter<const char*> options);
MockExpectedCall& Parse(unsigned int __numCalls__, CppUMockGen::Parameter<const Options*> __object__, CppUMockGen::Parameter<const char*> options);
} }

namespace expect { namespace Options$ {
MockExpectedCall& IsHelpRequested(CppUMockGen::Parameter<const Options*> __object__, bool __return__);
MockExpectedCall& IsHelpRequested(unsigned int __numCalls__, CppUMockGen::Parameter<const Options*> __object__, bool __return__);
} }

namespace expect { namespace Options$ {
MockExpectedCall& GetHelpText(CppUMockGen::Parameter<const Options*> __object__, const char* __return__);
MockExpectedCall& GetHelpText(unsigned int __numCalls__, CppUMockGen::Parameter<const Options*> __object__, const char* __return__);
} }

namespace expect { namespace Options$ {
MockExpectedCall& IsVersionRequested(CppUMockGen::Parameter<const Options*> __object__, bool __return__);
MockExpectedCall& IsVersionRequested(unsigned int __numCalls__, CppUMockGen::Parameter<const Options*> __object__, bool __return__);
} }

namespace expect { namespace Options$ {
MockExpectedCall& GetInputPath(CppUMockGen::Parameter<const Options*> __object__, const char* __return__);
MockExpectedCall& GetInputPath(unsigned int __numCalls__, CppUMockGen::Parameter<const Options*> __object__, const char* __return__);
} }

namespace expect { namespace Options$ {
MockExpectedCall& GetBaseDirectory(CppUMockGen::Parameter<const Options*> __object__, const char* __return__);
MockExpectedCall& GetBaseDirectory(unsigned int __numCalls__, CppUMockGen::Parameter<const Options*> __object__, const char* __return__);
} }

namespace expect { namespace Options$ {
MockExpectedCall& IsMockRequested(CppUMockGen::Parameter<const Options*> __object__, bool __return__);
MockExpectedCall& IsMockRequested(unsigned int __numCalls__, CppUMockGen::Parameter<const Options*> __object__, bool __return__);
} }

namespace expect { namespace Options$ {
MockExpectedCall& GetMockOutputPath(CppUMockGen::Parameter<const Options*> __object__, const char* __return__);
MockExpectedCall& GetMockOutputPath(unsigned int __numCalls__, CppUMockGen::Parameter<const Options*> __object__, const char* __return__);
} }

namespace expect { namespace Options$ {
MockExpectedCall& IsExpectationsRequested(CppUMockGen::Parameter<const Options*> __object__, bool __return__);
MockExpectedCall& IsExpectationsRequested(unsigned int __numCalls__, CppUMockGen::Parameter<const Options*> __object__, bool __return__);
} }

namespace expect { namespace Options$ {
MockExpectedCall& GetExpectationsOutputPath(CppUMockGen::Parameter<const Options*> __object__, const char* __return__);
MockExpectedCall& GetExpectationsOutputPath(unsigned int __numCalls__, CppUMockGen::Parameter<const Options*> __object__, const char* __return__);
} }

namespace expect { namespace Options$ {
MockExpectedCall& IsRegenerationRequested(CppUMockGen::Parameter<const Options*> __object__, bool __return__);
MockExpectedCall& IsRegenerationRequested(unsigned int __numCalls__, CppUMockGen::Parameter<const Options*> __object__, bool __return__);
} }

namespace expect { namespace Options$ {
MockExpectedCall& InterpretAsCpp(CppUMockGen::Parameter<const Options*> __object__, bool __return__);
MockExpectedCall& InterpretAsCpp(unsigned int __numCalls__, CppUMockGen::Parameter<const Options*> __object__, bool __return__);
} }

namespace expect { namespace Options$ {
MockExpectedCall& GetLanguageStandard(CppUMockGen::Parameter<const Options*> __object__, const char* __return__);
MockExpectedCall& GetLanguageStandard(unsigned int __numCalls__, CppUMockGen::Parameter<const Options*> __object__, const char* __return__);
} }

namespace expect { namespace Options$ {
MockExpectedCall& UseUnderlyingTypedef(CppUMockGen::Parameter<const Options*> __object__, bool __return__);
MockExpectedCall& UseUnderlyingTypedef(unsigned int __numCalls__, CppUMockGen::Parameter<const Options*> __object__, bool __return__);
} }

namespace expect { namespace Options$ {
MockExpectedCall& GetTypeOverrides(CppUMockGen::Parameter<const Options*> __object__, std::vector<std::string> &__return__);
MockExpectedCall& GetTypeOverrides(unsigned int __numCalls__, CppUMockGen::Parameter<const Options*> __object__, std::vector<std::string> &__return__);
} }

namespace expect { namespace Options$ {
MockExpectedCall& GetIncludePaths(CppUMockGen::Parameter<const Options*> __object__, std::vector<std::string> &__return__);
MockExpectedCall& GetIncludePaths(unsigned int __numCalls__, CppUMockGen::Parameter<const Options*> __object__, std::vector<std::string> &__return__);
} }

namespace expect { namespace Options$ {
MockExpectedCall& GetGenerationOptions(CppUMockGen::Parameter<const Options*> __object__, const char* __return__);
MockExpectedCall& GetGenerationOptions(unsigned int __numCalls__, CppUMockGen::Parameter<const Options*> __object__, const char* __return__);
} }

